load("data_exec/Xt_real_fan.RData")
load("data_exec/Yt_fan.RData")
load("data_exec/m.time.fan.RData")
load("data_exec/obs.matrix.RData")
load('data_prep/tower_dakar.RData')
load('data_exec/vehicle.state.d.RData')
load('data_exec/S.RData')
scale = 10
obs.lanes = c(1:ncol(Xt_real))
from.to = cbind(which(S==-1, arr.ind=TRUE)[,1],which(S==1, arr.ind=TRUE)[,1])
#input
Y=Yt[,obs.lanes]*1
f = function(t, X, W=0, Theta) X+S%*%(m.time[cbind(from.to ,min(trunc(t/120)+1,12))]*X[which(S==-1, arr.ind=TRUE)[,1]])
h = local(function(t, X, W=0, Theta) C %*% X/scale, envir=list(C=diag(nrow(S))[obs.lanes,]))
Q=function(t, X, W, Theta){ S %*% diag(m.time[cbind(from.to ,min(trunc(t/120)+1,12))]*X[which(S==-1, arr.ind=TRUE)[,1]]) %*% t(S) }
R= function(t, X, W, Theta) {
#R_matrix = diag(length(obs.lanes))*2
value = var.obs[abs(X)+1]
value = var.obs[pmin( round(abs(X)+2), length(var.obs))]
diag(value,length(obs.lanes),length(obs.lanes))
}
X0=c(Xt_real[1,])
P0=diag(nrow(S))*.1
length(X0)
nrow(Y)
library(ggplot2)
library('Matrix')
require('TTR')
require('igraph')
require('survey')
require('grr')
library(MASS)
require('numDeriv')
require('mvtnorm')
# load data
if (TRUE) {
load("data_exec/Xt_real_fan.RData")
load("data_exec/Yt_fan.RData")
load("data_exec/m.time.fan.RData")
load("data_exec/obs.matrix.RData")
load('data_prep/tower_dakar.RData')
load('data_exec/vehicle.state.d.RData')
load('data_exec/S.RData')
}
load("data_exec/Xt_real_fan.RData")
load("data_exec/Yt_fan.RData")
load("data_exec/m.time.fan.RData")
load("data_exec/obs.matrix.RData")
load('data_prep/tower_dakar.RData')
load('data_exec/vehicle.state.d.RData')
load('data_exec/S.RData')
network = readRDS('../../particle_filtering/data_download1/ContextData/Senegal_roads.RDS')
load('../../particle_filtering/2_Senegal/bench_senegal1/data_prep/tower_dakar.RData')
load('../../particle_filtering/2_Senegal/bench_senegal1/data_prep/lane.RData')  #edge number
load('../../particle_filtering/2_Senegal/bench_senegal1/data_prep/shortest_path.RData')   #node name
#preprocessing
lane = unique(unlist(lane))
lane=lane-1666
node = unique(unlist(shortest_path))
node = match(node,as.numeric(rownames(network$n)))
node=node[-which(is.na(node))]
node = unique(c(node,tower_dakar))
e = network$e[lane,]
n = network$n[node,]
network_dakar = list(n=n,e=e)
saveRDS(network_dakar,file='data_prep/network_dakar.RData')
e = network_dakar$e
e$from = as.numeric(levels(e$from))[e$from]
e$to = as.numeric(levels(e$to))[e$to]
inx = CPInx(e$from,e$to)
library(ggplot2)
library('Matrix')
require('TTR')
require('igraph')
require('survey')
require('grr')
library(MASS)
require('numDeriv')
require('mvtnorm')
require('Rcpp')
sourceCpp('rcpp_prep.cpp')
inx = CPInx(e$from,e$to)
S = CPS(e$from,e$to,inx)
save(S,file='data_exec/S.RData')
scale = 10
obs.lanes = c(1:ncol(Xt_real))
from.to = cbind(which(S==-1, arr.ind=TRUE)[,1],which(S==1, arr.ind=TRUE)[,1])
#input
Y=Yt[,obs.lanes]*1
f = function(t, X, W=0, Theta) X+S%*%(m.time[cbind(from.to ,min(trunc(t/120)+1,12))]*X[which(S==-1, arr.ind=TRUE)[,1]])
h = local(function(t, X, W=0, Theta) C %*% X/scale, envir=list(C=diag(nrow(S))[obs.lanes,]))
Q=function(t, X, W, Theta){ S %*% diag(m.time[cbind(from.to ,min(trunc(t/120)+1,12))]*X[which(S==-1, arr.ind=TRUE)[,1]]) %*% t(S) }
R= function(t, X, W, Theta) {
#R_matrix = diag(length(obs.lanes))*2
value = var.obs[abs(X)+1]
value = var.obs[pmin( round(abs(X)+2), length(var.obs))]
diag(value,length(obs.lanes),length(obs.lanes))
}
X0=c(Xt_real[1,])
P0=diag(nrow(S))*.1
name.file = paste('data/P.predict',1,sep = '_')
name.file = paste(name.file,'RDS',sep = '.')
name.file
#EKF
K = matrix(0,nrow=length(X0),ncol=ncol(Y)) # Kalman gain
mu.update = mu.predict = matrix(0, ncol=length(X0), nrow=nrow(Y))
mu.update[1,] = mu.predict[1,] = X0
F = P.predict = P.update = array(0, dim=c(length(X0),length(X0)))
P.predict = P.update = P0
name.file = paste('data/P.predict',1,sep = '_')
name.file = paste(name.file,'RDS',sep = '.')
saveRDS(P.predict,file = name.file)
name.file = paste('data/P.update',1,sep = '_')
name.file = paste(name.file,'RDS',sep = '.')
saveRDS(P.update,file = name.file)
dfdX = function(t, X, W, Theta)
jacobian(function(X, t, W, Theta) f(t, X, W, Theta), X, t=t, W=W, Theta=Theta)
dhdX = function(t, X, W, Theta)
jacobian(function(X, t, W, Theta) h(t, X, W, Theta), X, t=t, W=W, Theta=Theta)
for(i in 2:nrow(Y)){
print(i)
F = dfdX(i, mu.update[i-1,])
H = dhdX(i, mu.update[i-1,])
mu.predict[i,] = f(i, mu.update[i-1,])
P.predict = F %*% P.update %*% t(F) + Q(i, mu.update[i-1,])
K = P.predict %*% t(H) %*% ginv( H %*% P.predict %*% t(H) + R(i, mu.update[i-1,obs.lanes]))
P.update = P.predict - K %*% H %*% P.predict
#P.update[,,i] = (diag(nrow(K))-K %*% H) %*% P.predict[,,i] %*% t(diag(nrow(K))-K %*% H) + K %*% R(i, mu.update[i-1,obs.lanes]) %*% t(K)
mu.update[i,] = mu.predict[i,] + K %*% (Y[i,]- h(t, mu.predict[i,]))
name.file = paste('data/F',i-1,sep = '_')
name.file = paste(name.file,'RDS',sep = '.')
saveRDS(F,file = name.file)
name.file = paste('data/P.predict',i,sep = '_')
name.file = paste(name.file,'RDS',sep = '.')
saveRDS(P.predict,file = name.file)
name.file = paste('data/P.update',i,sep = '_')
name.file = paste(name.file,'RDS',sep = '.')
saveRDS(P.update,file = name.file)
}
xyz = list(mu=mu.update, P=P.update, mu.predict=mu.predict, P.predict=P.predict, F=F)
i
i=2
F = dfdX(i, mu.update[i-1,])
t
t=i
X=mu.update[i-1,]
X+S%*%(m.time[cbind(from.to ,min(trunc(t/120)+1,12))]*X[which(S==-1, arr.ind=TRUE)[,1]])
dim(m.time)
min(trunc(t/120) + 1, 12)
dim(from.to)
a=cbind(from.to ,min(trunc(t/120)+1,12))
from.to[1:5,]
max(from.to)
dim(m.time)
summary(from.to)
dim(S)
dim(m.time)
dim(S)
length(lane)
load('data_exec/S2.RData')
dim(S)
a=array(0,dim=c(1000,1000))
