{
    "collab_server" : "",
    "contents" : "/*************************************************************************\n\t> File Name: rcpp_try1.cpp\n\t> Author: \n\t> Mail: \n\t> Created Time: Thu Jun 16 20:44:35 2016\n ************************************************************************/\n\n#include<iostream>\n#include <Rcpp.h>\n// [[Rcpp::depends(RcppEigen)]]\n\n#include <RcppEigen.h>\n\nusing namespace std;\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nint CPInx(NumericVector e_from, NumericVector e_to) {\n    int inx = 0;\n    int length = e_from.size();\n    int i,j;\n    \n    for (i=0;i<length;i++) {\n        if (i % 100 == 0) \n          Rcout << i/100 << \" \" << inx << endl;\n        for (j=0;j<length;j++) {\n            if (e_to[i] == e_from[j])\n              inx++;\n        }\n    }\n    return inx;\n}\n\n// [[Rcpp::export]]\nNumericMatrix CPS1(NumericVector e_from, NumericVector e_to, int events) {\n  int length = e_from.size();\n  int i,j;\n  int idx=0;\n  NumericMatrix result(length,events);\n  \n  for (i=0;i<length;i++) {\n    if (i % 100 == 0) \n      Rcout << i/100 << \" \" << idx << endl;\n    for (j=0;j<length;j++) {\n      if (e_to[i] == e_from[j]) {\n        result(i,idx) = -1;\n        result(j,idx) = 1;\n        idx++; \n      }\n    }\n  }\n  return result;\n}\n\n// [[Rcpp::export]]\nNumericMatrix CPS2(NumericMatrix m_total, int events) {\n  int length = m_total.cols();\n  int i,j;\n  int idx=0;\n  NumericMatrix result(length,events);\n  \n  for (i=0;i<length;i++) {\n    if (i % 100 == 0) \n      Rcout << i/100 << \" \" << idx << endl;\n    for (j=0;j<length;j++) {\n      if ((i!=j)&&(m_total(i,j)>0)) {\n        result(i,idx) = -1;\n        result(j,idx) = 1;\n        idx++; \n      }\n    }\n  }\n  Rcout << idx << endl;\n  return result;\n}\n\n\n\n\n\n\n\n\n// [[Rcpp::export]]\nNumericMatrix TransitionMTime(NumericMatrix person_state, int size, int sep) {\n  int nrow = person_state.nrow();\n  int ncol = person_state.ncol();\n  NumericMatrix result(size,size);\n  int i,j;\n  \n  for (i=1;i<nrow;i++) {\n    if (i % sep == 0) continue;\n    for (j=0;j<ncol;j++) {\n      result(person_state(i-1,j)-1,person_state(i,j)-1) += 1;\n    }\n  }\n  return result;\n}\n\n// [[Rcpp::export]]\nNumericMatrix TransitionM(NumericMatrix person_state, int size) {\n  \n  int nrow = person_state.nrow();\n  int ncol = person_state.ncol();\n  NumericMatrix result(size,size);\n  int i,j;\n  \n  for (i=1;i<nrow;i++) {\n    Rcout << i << endl;\n    for (j=0;j<ncol;j++) {\n      result(person_state(i-1,j)-1,person_state(i,j)-1) += 1;\n    }\n  }\n\n  return result;\n}\n\n// [[Rcpp::export]]\nNumericMatrix PersonState(NumericVector time, NumericVector tower, NumericVector person, int nrow, int ncol, int min_time) {\n  \n  int it = time.length();\n  NumericMatrix result(nrow,ncol);\n  int i,j,tmp_ndx,tmp_tower,tmp_person,last;\n  last = 0;\n  \n  for(i=0;i<it;i++) {\n    tmp_ndx = time(i) - min_time;\n    if (tmp_ndx > last) {\n      //Rcout << tmp_ndx << endl;\n      for (j=last+1;j<=tmp_ndx;j++) {\n        result(j,_) = result(last,_);\n      }\n    }\n    tmp_tower = tower(i);\n    tmp_person = person(i);\n    result(tmp_ndx,tmp_person-1) = tmp_tower;\n    last = tmp_ndx;\n  }\n  return result;\n}\n/*\n// [[Rcpp::export]]\nNumericMatrix Transition(NumericVector tower, NumericVector person, int nrow) {\n  \n  int it = tower.length();\n  NumericMatrix result(nrow,nrow);\n  int i,last;\n  last = 1;\n  \n  for(i=1;i<it;i++) {\n    if (person(i) != last) {\n      last = person(i);\n      continue;\n    }\n    result(tower(i-1)-1,tower(i)-1) += 1; \n  }\n  return result;\n}\n*/\n// [[Rcpp::export]]\nNumericMatrix InitLoc(NumericMatrix person_state) {\n  \n  int nrow = person_state.nrow();\n  int ncol = person_state.ncol();\n  int i,j,val,ndx;\n  \n  for(j=0;j<ncol;j++) {\n    ndx=0;\n    val=0;\n    for(i=0;i<nrow;i++)\n      if (person_state(i,j)>0) {\n        val = person_state(i,j);\n        ndx = i;\n        break;\n      }\n    for(i=0;i<ndx;i++)\n      person_state(i,j) = val;\n  }\n  \n  return person_state;\n}\n\n\n\n\n\n\n\n\n\n\n// [[Rcpp::export]]\nNumericMatrix trytry(NumericMatrix a) {\n  NumericMatrix result(3,4);\n  result(1,_) = a(1,_);\n  print(a);\n  Rcout << a << endl;\n  return result;\n}\n\n\n// [[Rcpp::export]]\nNumericMatrix StateXt(NumericVector time, NumericVector tower, int nrow, int ncol, int min_time) {\n    \n  int it = time.length();\n  NumericMatrix Xt_real(nrow,ncol);\n  int i,tmp_ndx,tmp_tower;\n  \n  for(i=0;i<it;i++) {\n    tmp_ndx = time(i) - min_time;\n    tmp_tower = tower(i);\n    Xt_real(tmp_ndx,tmp_tower-1) = Xt_real(tmp_ndx,tmp_tower-1) + 1;\n  }\n\n  return Xt_real;\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1473011258060.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2428519413",
    "id" : "66221E5B",
    "lastKnownWriteTime" : 1473171064,
    "last_content_update" : 1473171064906,
    "path" : "~/Documents/R/kalman_filtering/2_senegal/rcpp_prep.cpp",
    "project_path" : "rcpp_prep.cpp",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}