{
    "collab_server" : "",
    "contents" : "library(data.table)\n\n#load data\n#construct event\nif (TRUE) {\n  realdata = readRDS(file = \"data_prep/100.events.RDS\")\n  network = readRDS(file = \"data_prep/network.RDS\")\n  saveRDS(network,'network.RDS')\n  e=network$e\n  n=network$n\n  activity.end = realdata$activity.end\n  link.leave = realdata$link.leave\n  link.enter = realdata$link.enter\n  activity.start = realdata$activity.start\n  \n  # events\n  events = list(activity.end = activity.end, link.leave = link.leave, link.enter = link.enter, activity.start = activity.start)\n  invisible(lapply(1:length(events), function(n) if(!is.infinite(events[[n]]$time[nrow(events[[n]])])){\n    events[[n]] <<- events[[n]][order(events[[n]]$time),]\n    events[[n]] <<- rbind(events[[n]], tail(events[[n]],1))\n    events[[n]]$time[nrow(events[[n]])] <<- Inf\n  }))\n  ndx = integer(length=length(events))\n  ndx[] = 1\n  \n  # has problem, 4 person != 3 person, fixed\n  unique_person = c(levels(events[[1]]$person),levels(events[[2]]$person),levels(events[[3]]$person),levels(events[[4]]$person))\n  unique_person = unique_person[!duplicated(unique_person)]\n  unique_lane = rownames(network$e)\n  \n  events[[1]]$person = factor(events[[1]]$person,levels = unique_person)\n  events[[2]]$person = factor(events[[2]]$person,levels = unique_person)\n  events[[3]]$person = factor(events[[3]]$person,levels = unique_person)\n  events[[4]]$person = factor(events[[4]]$person,levels = unique_person)\n  events[[1]]$link = factor(events[[1]]$link,levels = unique_lane)\n  events[[2]]$link = factor(events[[2]]$link,levels = unique_lane)\n  events[[3]]$link = factor(events[[3]]$link,levels = unique_lane)\n  events[[4]]$link = factor(events[[4]]$link,levels = unique_lane)\n  \n  levels(events[[3]]$person) = c(1:length(unique_person))\n  levels(events[[4]]$person) = c(1:length(unique_person))\n  levels(events[[2]]$person) = c(1:length(unique_person))\n  levels(events[[1]]$person) = c(1:length(unique_person))\n  levels(events[[1]]$link) = c(1:length(unique_lane))\n  levels(events[[2]]$link) = c(1:length(unique_lane))\n  levels(events[[3]]$link) = c(1:length(unique_lane))\n  levels(events[[4]]$link) = c(1:length(unique_lane)) \n}\n\n\n#functions\nLocation <- function(events,network) {\n  types1=unique(paste(events[[1]]$type,events[[1]]$link,sep = '@'))\n  types2=unique(paste(events[[4]]$type,events[[4]]$link,sep = '@'))\n  types=unique(c(types1,types2))\n  links <- c(1:nrow(network$e))\n  types = c(types,'home@7627')\n  locations <- c(types,links)\n  \n  #test \n  if (FALSE) {\n    person.state.d = matrix(as.numeric(factor(person.state.d, levels=locations)), nrow=nrow(person.state.d))\n    a=matrix(person.state.d %in% locations,nrow=nrow(person.state.d))\n    b=which(a!=TRUE,arr.ind = TRUE)\n    #col=3579,home@7627\n  }\n  \n  return(list(locations=locations,facility_length=length(types)))\n}\n\nPersonStateT <- function(events,extend) {\n  types <- levels(events[[4]]$type)\n  min.time <- min(sapply(1:length(events),function(n) min(events[[n]]$time[!is.infinite(events[[n]]$time)])))\n  max.time <- min(min.time+24*3600,max(sapply(1:length(events),function(n) max(events[[n]]$time[!is.infinite(events[[n]]$time)]))))\n  delta.t <- 60\n  td <- seq(from=min.time, to=max.time+delta.t-1, by=delta.t)\n  \n  person.state.d <- matrix(0,nrow = length(td), ncol = length(unique(activity.end$person)))\n  person.state.d[1,] <- paste(types[1],0,sep = '@')\n  ndx <- integer(length=length(events))\n  ndx[] <- 1\n  ctime <- min.time\n  last <- 1\n  \n  while(any(ndx<sapply(events, nrow))){\n    ctime <- min(sapply(1:length(events),function(n) events[[n]]$time[ndx[n]] ))\n    if(ctime > max.time)\n      break\n    ndx0 <- which(td>=ctime)[1]\n    if (ndx0 > last) {\n      print(ndx0)\n      for(i in c((last+1):ndx0)) {\n        person.state.d[i,] <- person.state.d[last,]\n      }\n    }\n    # update site state according to events\n    switch(which.min(sapply(1:length(events),function(n)events[[n]]$time[ndx[n]] )),\n           {# activity end\n             #person.state[ndx0, events[[1]]$person[ndx[1]] ] =  events[[1]]$link[ndx[1]]\n             ndx[1]<-ndx[1]+1\n           },\n           {# link.leave\n             ndx[2]<-ndx[2]+1\n           },\n           {# link.enter\n             person.state.d[ndx0, events[[3]]$person[ndx[3]] ] <-  events[[3]]$link[ndx[3]] \n             ndx[3]<-ndx[3]+1\n           },\n           {# activity.start\n             person.state.d[ndx0, events[[4]]$person[ndx[4]] ] <-  paste(as.character(events[[4]]$type[ndx[4]]), events[[4]]$link[ndx[4]],sep = '@')\n             ndx[4]<-ndx[4]+1\n           })\n    #person.state.d[ndx0+1,] = person.state.d[ndx0,]\n    last <- ndx0\n  }\n  #take care of initial\n  for (i in c(1:ncol(person.state.d))) {\n    if ((i %% 10) == 0)\n      print(i/10)\n    t = sapply(1:length(events),function(n)events[[n]]$time[which(events[[n]]$person == i)[1]] )\n    t[is.na(t)] = Inf\n    b=which(person.state.d[,i]=='home@0')\n    c=events[[which.min(t)]]$link[which(events[[which.min(t)]]$person == i)[1]]\n    person.state.d[b,i] = paste('home',c,sep = '@')\n  }\n  \n  #person.state.d <- matrix(as.numeric(factor(person.state.d, levels=locations)), nrow=nrow(person.state.d))\n  #inc\n  td <- c(seq(to=min.time-60,by=60,length.out = extend),td)\n  person.state.d <- rbind(array('h',dim=c(extend,ncol(person.state.d))),person.state.d)\n  return(list(person.state.d=person.state.d,td=td))\n}\n\nMTime <- function(person.state.d,td,locations,smoother) {\n  m <- table(factor(head(person.state.d,-1),levels=locations), factor(tail(person.state.d,-1),levels=locations))\n  m <- sweep(m, 1, STATS=rowSums(m), FUN='/')\n  rownames(m) <- colnames(m) <- locations\n  \n  m.time <- table(factor(head(person.state.d,-1),levels=locations), factor(tail(person.state.d,-1),levels=locations),cut(td[row(head(person.state.d,-1))]/3600,breaks = 0:24))\n  m.time <- sweep(m.time*smoother, MARGIN = 1:2, STATS = table(factor(head(person.state.d,-1),levels=locations), factor(tail(person.state.d,-1),levels=locations))*(1-smoother), FUN = '+')\n  m.time <- sweep(m.time, MARGIN = c(1,3), STATS = colSums(aperm(m.time,perm = c(2,1,3)),dims = 1),FUN = '/')\n  dimnames(m.time)[[1]] <- dimnames(m.time)[[2]] <- locations\n  \n  return(list(m=m,m.time=m.time))\n}\n\nMTimePlot <- function(m) {\n  image(z=asinh(t(m)*1000),x=1:ncol(m), y=1:nrow(m),ylim=c(nrow(m)+.5,.5),xlab='to', ylab='from', xaxt='n', yaxt='n',asp=1)\n  axis(side=1, at=1:ncol(m), labels=colnames(m), las=2)\n  axis(side=2, at=1:nrow(m), labels=rownames(m), las=2)\n}\n\nYT <- function(person.state.d,scale,locations) {\n  numbers <- dim(person.state.d)[2]\n  probe.person <- sample.int(ncol(person.state.d),trunc(ncol(person.state.d)/scale))\n  Yt <- person.state.d[,probe.person]\n  return(list(probe.person=probe.person,Yt=Yt))\n}\n\nLogObsMatrix <- function(obs.scale,N) {\n  n <- trunc(N/obs.scale)\n  obs.matrix <- array(0,dim = c(N+1,n+1))\n  c <- lchoose(N,n)\n  for (i in c(1:nrow(obs.matrix))) {\n    M <- i-1\n    m <- c(0:n)\n    a <- lchoose(M,m)\n    b <- lchoose(N-M,n-m)\n    d <- a+b-c\n    obs.matrix[i,] <- exp(d)\n  }\n  obs.matrix <- pmax(obs.matrix, 1e-300)\n  obs.matrix <- log(obs.matrix)\n}\n\nLogObsMatrixPlot <- function(obs.matrix) {\n  image(z=t(asinh(1000*obs.matrix)),x=1:ncol(obs.matrix) -1, y=1:nrow(obs.matrix) -1,xlab='# oberved vehicles scaled', ylab='# vehicles', asp=1)\n}\n\n#constructing prerequisite matrices\nif (TRUE) {\n  extend = 60\n  info_locations = Location(events,network)\n  locations = info_locations$locations\n  facility_length = info_locations$facility_length\n  person.track = PersonStateT(events,extend)\n  person.state.d = person.track$person.state.d\n  td = person.track$td\n  #person.state.d <- matrix(as.numeric(factor(person.state.d, levels=locations)), nrow=nrow(person.state.d))\n  #transition =MTime(person.state.d,td,locations,0.9999)\n  #m.time = transition$m.time\n  Xt_real = person.state.d\n  observation = YT(person.state.d,10,locations)\n  Yt = observation$Yt\n  probe.person = observation$probe.person\n  obs.matrix = LogObsMatrix(10,dim(person.state.d)[2])\n  \n  #MTimePlot(transition$m)\n  \n  save(person.state.d,file='data_prep/person.state.d.RData')\n  #save(m.time,file='data_exec/m.time.RData')\n  save(Xt_real,file='data_exec/Xt_real.RData')\n  save(probe.person,file='data_prep/probe.person.RData')\n  save(Yt,file = 'data_exec/Yt.RData')\n  save(obs.matrix,file='data_exec/obs.matrix.RData')\n  save(td,file='data_prep/td.RData')\n  save(locations,file='data_prep/locations.RData')\n  save(facility_length, file='data_prep/facility_length.RData')\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1478108091721.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4177169234",
    "id" : "A57B9BD1",
    "lastKnownWriteTime" : 1478957498,
    "last_content_update" : 1478957498792,
    "path" : "~/Documents/R/RL_DrivePlan_0/Berlin/bench_berlin5_100/prep_pf.R",
    "project_path" : "prep_pf.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}