{
    "collab_server" : "",
    "contents" : "/*************************************************************************\n\t> File Name: rcpp_try1.cpp\n\t> Author: \n\t> Mail: \n\t> Created Time: Thu Jun 16 20:44:35 2016\n ************************************************************************/\n\n#include<iostream>\n#include <Rcpp.h>\n// [[Rcpp::depends(RcppEigen)]]\n\n#include <RcppEigen.h>\n\nusing namespace std;\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nList ListAdd(List list1, List list2, float alpha) {\n  //list1+list2*alpha\n  NumericVector tmp1,tmp2;\n  int size = list1.size();\n  List result(size);\n  int i,j;\n  for(i = 0; i < size; i++) {\n    tmp1 = list1[i];\n    tmp2 = list2[i];\n    NumericVector tmp3(tmp1.size());\n    for(j=0;j<tmp1.size();j++) {\n      tmp3(j) = tmp1(j) + tmp2(j) * alpha; \n    }\n    result[i] = tmp3;\n    //Rcout << i << ' ' << tmp1(0) << endl;\n  }\n  return result;\n}\n\n// [[Rcpp::export]]\nNumericMatrix SamplingAction(NumericMatrix Xi_1, NumericMatrix xyz, List transition, List action_list) {\n  int nrow = Xi_1.nrow(), ncol = Xi_1.ncol();\n  NumericMatrix result(nrow,ncol);\n  NumericVector tmp, var;\n  int i,j,k;\n  for(i = 0; i < nrow; i++) {\n    for(j=0; j<ncol; j++) {\n      tmp = transition[Xi_1(i,j)-1];\n      var = action_list[Xi_1(i,j)-1];\n      for (k=0; k<tmp.size(); k++) {\n        if (tmp(k) >= xyz(i,j)) break;\n      }\n      //if(k==25)\n      //  Rcout << i << \" \" << j << \" \" << k << \" \" << transition(Xi_1(i,j)-1,k-1) << \" \" << xyz(i,j) << endl;\n      result(i,j) = var(k);\n    }\n  }\n  return result;\n}\n\n// [[Rcpp::export]]\nNumericMatrix SamplingState(NumericMatrix Xi_1, NumericMatrix Xi_2, NumericMatrix xyz, NumericMatrix transition) {\n  int nrow = Xi_1.nrow(), ncol = Xi_1.ncol();\n  NumericMatrix result(nrow,ncol);\n  int i,j;\n  for(i = 0; i < nrow; i++) {\n    for(j=0; j<ncol; j++) {\n      if (transition(i,Xi_1(i,j)-1) >= xyz(i,j))\n        result(i,j) = Xi_2(i,j);\n      else\n        result(i,j) = Xi_1(i,j);\n    }\n  }\n  return result;\n}\n\n// [[Rcpp::export]]\nNumericVector CWeight(NumericMatrix Xi_obs, NumericVector Yt_1, NumericMatrix obs_matrix) {\n  int nrow = Xi_obs.nrow(), ncol = Xi_obs.ncol();\n  NumericVector result(nrow);\n  int i,j;\n  for (i=0;i<nrow;i++) {\n    result(i) = 0;\n    for (j=0;j<ncol;j++) {\n      result(i) += obs_matrix(Xi_obs(i,j),Yt_1(j));\n    }\n  }\n\n  return result;\n}\n\n// [[Rcpp::export]]\nNumericMatrix CountAction1(NumericMatrix x_sample, NumericMatrix u_sample, NumericVector w, int size, NumericVector T, int k) {\n  int nrow = x_sample.nrow(), ncol = x_sample.ncol();\n  NumericMatrix result(size,size);\n  int i,j;\n  for (i=0;i<nrow;i++) {\n    if (k <= T(i)) {\n      for (j=0;j<ncol;j++) {\n        result(x_sample(i,j)-1,u_sample(i,j)-1) += w(i)*(1/(T(i)+1));\n      } \n    }\n  }\n  return result;\n}\n\n// [[Rcpp::export]]\nList ListCountAction3(NumericMatrix x_sample, NumericMatrix u_sample, NumericMatrix w, List policy_template, List action_list) {\n  int nrow = x_sample.nrow(), ncol = x_sample.ncol(), size = policy_template.size();\n  NumericVector tmp1,tmp2;\n  List result(size);\n  //result = policy_template;\n  int i,j,k;\n  for(i=0;i<size;i++) {\n    tmp1 = policy_template[i];\n    NumericVector tmp3(tmp1.size());\n    result[i] = tmp3;\n  }\n  for (i=0;i<nrow;i++) {\n    for (j=0;j<ncol;j++) {\n      //Rcout << i << \" \" << j << endl;\n      tmp1 = action_list[x_sample(i,j)-1];\n      tmp2 = result[x_sample(i,j)-1];\n      for (k=0;k<tmp1.size();k++) {\n        if (tmp1(k)==u_sample(i,j)) {\n          //Rcout << \"zero \" << k << \" \" << w(i,j) << \" \" <<  x_sample(i,j) << \" \" << tmp2.size() << endl;\n          tmp2(k) += w(i,j);\n          //Rcout << \"one \" << i << \" \" << j << \" \" << x_sample.nrow() << \" \" << x_sample.ncol() << endl;\n          //Rcout << x_sample(i,j) << endl;\n          result[x_sample(i,j)-1] = tmp2;\n          //Rcout << \"go on\" << endl;\n          break;\n        }\n      }\n      //Rcout << \"next\" << endl;\n    }\n  }\n  return result;\n}\n\n/*\n * // [[Rcpp::export]]\n NumericMatrix StateProb(NumericMatrix Xi_1, NumericMatrix Xi_2, NumericMatrix Xi_3, NumericMatrix transition) {\nint nrow = Xi_1.nrow(), ncol = Xi_1.ncol();\nNumericMatrix result(nrow,ncol);\nint i,j;\nfor(i = 0; i < nrow; i++) {\nfor(j=0; j<ncol; j++) {\nif (Xi_1(i,j)==Xi_2(i,j))\nresult(i,j) = 1;\nelse if (Xi_3(i,j)==Xi_1(i,j))\nresult(i,j) = 1-transition(i,Xi_1(i,j)-1);\nelse\nresult(i,j) = transition(i,Xi_1(i,j)-1);\n}\n}\nreturn result;\n}\n */\n\n/*\n * // [[Rcpp::export]]\n NumericMatrix Sampling(NumericMatrix Xi_1, NumericMatrix xyz, NumericMatrix m_time_m, NumericMatrix m_time_ndx) {\nint nrow = Xi_1.nrow(), ncol = Xi_1.ncol(), mcol = m_time_m.ncol();\nNumericMatrix result(nrow,ncol);\nint i,j,k;\nfor(i = 0; i < nrow; i++) {\nfor(j=0; j<ncol; j++) {\nfor (k=0; k<mcol; k++) {\nif (m_time_m(Xi_1(i,j)-1,k) >= xyz(i,j)) break;\n}\nresult(i,j) = m_time_ndx(Xi_1(i,j)-1,k);\n}\n}\nreturn result;\n}\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1478118697810.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3207153159",
    "id" : "C33E17E",
    "lastKnownWriteTime" : 1478200538,
    "last_content_update" : 1478200538509,
    "path" : "~/Documents/R/RL_DrivePlan_0/Berlin/bench_berlin5_100/rcpp_pf_location.cpp",
    "project_path" : "rcpp_pf_location.cpp",
    "properties" : {
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}