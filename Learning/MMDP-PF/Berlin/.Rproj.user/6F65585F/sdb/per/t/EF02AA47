{
    "collab_server" : "",
    "contents" : "\nlibrary(data.table)\nrequire('RcppEigen')\nrequire('Rcpp')\nsourceCpp(\"rcpp_prep_rl.cpp\")\n\n#load data\nload(\"data_exec/Xt_real.RData\")\nload('data_exec/obs.matrix.RData')\nload('data_prep/person.state.d.RData')\nload('data_exec/Yt.RData')\nload('data_prep/td.RData')\nload('data_prep/locations.RData')\nload('data_prep/facility_length.RData')\nnetwork = readRDS(file = \"data_prep/network.RDS\")\n#policy tmp\nif (FALSE) {\n  policy_template <- list()\n  for (i in c(1:length(locations))) {\n    from <- which(possible_actions[,1]==i)\n    policy_template <- lappend(policy_template,array(0,dim=length(from)))\n  }\n  save(policy_template,file='data_exec/policy_template.RData')\n}\nload('data_exec/policy_template.RData')\n\n#model definition\nAgents = c(1:ncol(person.state.d))\nTime = c(1:nrow(person.state.d))\nActions = locations\nStates = locations\nNumAgents = length(Agents)\nNumTime = length(Time)\nNumActions = length(Actions)\nNumStates = length(States)\n\n\n#functions\nlappend <- function (lst, ...){\n  lst <- c(lst, list(...))\n  return(lst)\n}\n\nPolicyFunction <- function(person.state.d,locations, possible_actions, SmallProb,policy_template) {\n  \n  action_list <- list()\n  for (i in c(1:length(locations))) {\n    from <- which(possible_actions[,1]==i)\n    action_list <- lappend(action_list,possible_actions[from,2])\n  }\n  if (FALSE) {  \n    policy_template <- list()\n    for (i in c(1:length(locations))) {\n      from <- which(possible_actions[,1]==i)\n      policy_template <- lappend(policy_template,array(SmallProb,dim=length(from)))\n    }\n  }\n  person.state.d <- matrix(as.numeric(factor(person.state.d, levels=locations)), nrow=nrow(person.state.d))\n  \n  Ppolicy <- list()\n  for (i in c(1:(nrow(person.state.d)-1))) {\n    print(i)\n    sourceCpp(\"rcpp_prep_rl.cpp\")\n    policy_tmp3 <- PolicyList(person.state.d[i,],person.state.d[i+1,],policy_template,action_list,SmallProb)\n    policy_tmp3 <- lapply(policy_tmp3, function(x) x/sum(x))\n    Ppolicy <- lappend(Ppolicy,policy_tmp3)\n  }\n  \n  return(list(Ppolicy=Ppolicy,action_list=action_list))\n}\n\nPossibleActionFunction <- function(network,locations,facility_length) {\n  e = network$e\n  #sinto: node e$to, e in network$e sequence\n  sinto = array(0,dim=length(locations))\n  for (i in c(1:length(locations))) {\n    if (i <= facility_length) {\n      link_tmp = as.numeric(strsplit(locations[i],'@')[[1]][2])\n    } else {\n      link_tmp = as.numeric(locations[i])\n    }\n    sinto[i] = as.integer(as.character(e$to[link_tmp]))\n  }\n  sinfrom = array(0,dim=length(locations))\n  for (i in c(1:length(locations))) {\n    if (i <= facility_length) {\n      link_tmp = as.numeric(strsplit(locations[i],'@')[[1]][2])\n    } else {\n      link_tmp = as.numeric(locations[i])\n    }\n    sinfrom[i] = as.integer(as.character(e$from[link_tmp]))\n  }\n  \n  #156430\n  possible_actions = PossibleAction(sinto,sinfrom,facility_length)\n  return(possible_actions)\n}\n\nRoadLoadFunction <- function(network,scale_factor) {\n  Roadload <- array(0,dim=nrow(network$e))\n  Roadload <- as.numeric(as.character(network$e$length))/as.numeric(as.character(network$e$freespeed)) * (as.numeric(as.character(network$e$capacity))/3600) * as.numeric(as.character(network$e$lanes)) * scale_factor\n  \n  TimeMoveOut <- array(0,dim=nrow(network$e))\n  TimeMoveOut <- as.numeric(as.character(network$e$length))/as.numeric(as.character(network$e$freespeed))/60\n  TimeMoveOut <- pmax(TimeMoveOut,1)\n  \n  return(list(Roadload=Roadload,TimeMoveOut=TimeMoveOut))\n}\n\n\nFacilityIndex <- function(locations,facility_length) {\n  #home,leis,other,work,shop\n  home={}\n  leis={}\n  other={}\n  work={}\n  shop={}\n  road_facilities = array(0,dim=c(length(locations)-facility_length,5))\n  for (i in c(1:facility_length)) {\n    idx1 <- strsplit(locations[i],'@')[[1]][1]\n    idx2 <- as.numeric(strsplit(locations[i],'@')[[1]][2])\n    switch(idx1,'home' = {home=c(home,i) \n          road_facilities[idx2,1]=i},\n           'leis' = {leis=c(leis,i) \n           road_facilities[idx2,2]=i},\n           'other' = {other=c(other,i) \n           road_facilities[idx2,3]=i},\n           'work' = {work=c(work,i) \n           road_facilities[idx2,4]=i},\n           'shop' = {shop=c(shop,i) \n           road_facilities[idx2,5]=i})\n  }\n  facility_index = list(home=home,leis=leis,other=other,work=work,shop=shop)\n  return(list(facility_index=facility_index,road_facilities=road_facilities))\n}\n\n#constructing prerequisite matrices\nif (TRUE) {\n  SmallProb = 1e-2\n  FlowCapacity = 2*1e-2\n  #locations = Location(events,network)\n  facility_indexes = FacilityIndex(locations,facility_length)\n  facility_index = facility_indexes$facility_index\n  road_facilities = facility_indexes$road_facilities\n  \n  possible_actions = PossibleActionFunction(network,locations,facility_length)\n  \n  #constructing ppolicy,ptransit,preward\n  Ppolicy = PolicyFunction(person.state.d,locations, possible_actions, SmallProb,policy_template)\n  PpolicyUpdate = Ppolicy$Ppolicy\n  action_list = Ppolicy$action_list\n  Roadload = RoadLoadFunction(network,FlowCapacity)\n  \n  home = data.frame(begin=16,end=8,typ.dur=16)\n  leis = data.frame(begin=8,end=16,typ.dur=8)\n  other = data.frame(begin=8,end=16,typ.dur=8)\n  shop = data.frame(begin=8,end=16,typ.dur=8)\n  work = data.frame(begin=8,end=16,typ.dur=8)\n  info_facility = as.data.frame(matrix(c(home,leis,other,work,shop),ncol=3,byrow = TRUE),row.names = c('home','leis','other','work','shop'))\n  colnames(info_facility) = c('begin','end','typ.dur')\n  \n  #save(Ppolicy,file = 'data_exec/Ppolicy.RData')\n  save(info_facility,file='data_exec/info_facility.RData')\n  save(Roadload,file='data_exec/Roadload.RData')\n  saveRDS(PpolicyUpdate,file='data_exec/PpolicyUpdate_full.RDS')\n  save(possible_actions,file='data_exec/possible_actions.RData')\n  save(action_list,file = 'data_exec/action_list.RData')\n  save(facility_index,file='data_exec/facility_index.RData')\n}\n\n\n\n\n\n#server collecting data\n#../target/matsim-inference-1.0-SNAPSHOT-jar-with-dependencies.jar\n#~/MATSIM/matsim/matsim/target/matsim-0.7.0-SNAPSHOT-jar-with-dependencies.jar\n#~/transportation/matsim-R/target/matsim-inference-1.0-SNAPSHOT-jar-with-dependencies.jar\n\n#change to 8. hours\nif (FALSE) {\n  PpolicyUpdate = readRDS('data_exec/PpolicyUpdate_full.RDS')\n  tmp_policy = list()\n  for (i in c(1:500)) {\n    tmp_policy <- lappend(tmp_policy,PpolicyUpdate[[i]])\n  }\n  saveRDS(tmp_policy,file='data_exec/PpolicyUpdate.RDS')\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1478108098107.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "50|14|56|2|\n",
    "hash" : "3422678996",
    "id" : "EF02AA47",
    "lastKnownWriteTime" : 1478924556,
    "last_content_update" : 1518052214471,
    "path" : "~/Documents/R/RL_DrivePlan_0/Berlin/bench_berlin5_100/prep_rl.R",
    "project_path" : "prep_rl.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}